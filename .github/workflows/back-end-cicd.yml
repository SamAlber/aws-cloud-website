name: Terraform CI/CD

on:
  push:
    branches:
      - main  # Trigger the pipeline on pushes to the main branch

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.8  # Update to your desired Terraform version

        # Optionally for automating the updates.
        # with:
        # terraform_version: ${{ secrets.TERRAFORM_VERSION }}
        

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      # `terraform apply` should be done conditionally, e.g., only on merges
      if: github.ref == 'refs/heads/main' # Ensures that this step only runs when the pipeline is triggered by a push to the main branch. 
      # This prevents applying infrastructure changes on every branch or unapproved environments, ensuring changes are only deployed to production when merged into the main branch. 

      run: terraform apply -input=false tfplan # Executes the terraform apply command using the previously generated plan file (tfplan).
      # The -input=false flag prevents Terraform from prompting for user input, which is crucial for automation in CI/CD pipelines.

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east1'
