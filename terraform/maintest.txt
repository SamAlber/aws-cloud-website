
provider "aws" {
  region = var.aws_region
}

data "aws_caller_identity" "current" {
  # This will fetch:

  # The AWS Account ID (data.aws_caller_identity.current.account_id)
  # The IAM User/Role ARN (data.aws_caller_identity.current.arn)
  # The Caller’s User ID (data.aws_caller_identity.current.user_id) 
}

# This will fetch:

# The AWS Account ID (data.aws_caller_identity.current.account_id)
# The IAM User/Role ARN (data.aws_caller_identity.current.arn)
# The Caller’s User ID (data.aws_caller_identity.current.user_id) 

data "aws_secretsmanager_secret_version" "private_key" {
  secret_id = "cloudfront-private-key"
}

data "aws_secretsmanager_secret_version" "key_pair_id" {
  secret_id = "cloudfront-key-pair-id"
}

resource "random_string" "bucket_suffix" {
  length  = 6
  special = false
  upper   = false
}

locals {
  bucket_gen = random_string.bucket_suffix.result
}

#-------------------------WebSiteS3StaticBucket--------------------------------------------------#


resource "aws_s3_bucket" "website_bucket" {
  bucket = "cloud-resume-${local.bucket_gen}"

  tags = {
    Name = "cloud-resume-${local.bucket_gen}"
  }
}

resource "aws_s3_bucket_ownership_controls" "ownership_controls" {
  bucket = aws_s3_bucket.website_bucket.id

  rule {
    object_ownership = "BucketOwnerPreferred"
  }
}

resource "aws_s3_bucket_acl" "bucket_acl" {
  bucket = aws_s3_bucket.website_bucket.id
  acl    = "private"

  depends_on = [aws_s3_bucket_ownership_controls.ownership_controls] // Ownership controls must be aplied first to prevent conflicts.
}

resource "aws_s3_bucket_website_configuration" "website_configuration" {
  bucket = aws_s3_bucket.website_bucket.id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "error.html"
  }
}

resource "aws_s3_bucket_cors_configuration" "cors_configuration" {
  bucket = aws_s3_bucket.website_bucket.id

  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"] # Update with your frontend origin in production
    expose_headers  = []
  }
}

#-------------------------S3-CV-AWSSES--------------------------------------------------#

resource "aws_s3_bucket" "cv_bucket" {
  bucket = "cv-${local.bucket_gen}"

  tags = {
    Name = "cv-${local.bucket_gen}"
  }
}

resource "aws_s3_bucket_policy" "cv_bucket_policy" {
  bucket = aws_s3_bucket.cv_bucket.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid       = "AllowCloudFrontAccess",
        Effect    = "Allow",
        Principal = "*",  # Allow all principals (required for pre-signed URL usage)
        Action    = "s3:GetObject",
        Resource  = "arn:aws:s3:::${aws_s3_bucket.cv_bucket.id}/*",
        Condition = {
          StringEquals = {
            "AWS:SourceArn" = "arn:aws:cloudfront::${data.aws_caller_identity.current.account_id}:distribution/${aws_cloudfront_distribution.cdn.id}"
          }
        }
      }
    ]
  })
}

resource "aws_s3_object" "cv_file" {
  bucket       = aws_s3_bucket.cv_bucket.id
  key          = "cv.pdf"
  source       = "CV.pdf"
  content_type = "application/pdf"
}

resource "aws_ses_email_identity" "verified_sender" {
  email = "sam.albershtein@gmail.com"
}


# To allow the Lambda function to send emails via SES, you need to attach appropriate IAM permissions.
resource "aws_iam_policy" "ses_send_policy" {
  name        = "SESSendPolicy"
  description = "Allows Lambda to send emails via SES"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = "ses:SendEmail",
        Resource = "*"
      },
      {
        Effect   = "Allow",
        Action   = "ses:SendRawEmail",
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_ses_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.ses_send_policy.arn
}

#-------------------------SESLambda--------------------------------------------------#

resource "aws_lambda_function" "ses_lambda" {
  filename      = "SES_lambda.zip"
  function_name = "SESFunction"
  role          = aws_iam_role.lambda_role.arn
  handler       = "SES_lambda.lambda_handler"
  runtime       = "python3.9"

  environment {
    variables = {
      SENDER_EMAIL   = aws_ses_email_identity.verified_sender.email
      CLOUDFRONT_URL = "https://${aws_cloudfront_distribution.cdn.domain_name}/cv.pdf"
      PRIVATE_KEY    = data.aws_secretsmanager_secret_version.private_key.secret_string
      KEY_PAIR_ID    = data.aws_secretsmanager_secret_version.key_pair_id.secret_string
    }
  }

  depends_on = [
    aws_ses_email_identity.verified_sender
  ]
}


# Grant Lambda Access to Secrets: IAM permissions for Lambda to access Secrets Manager 
resource "aws_iam_policy" "secrets_manager_access" {
  name        = "SecretsManagerAccess"
  description = "Allows Lambda to read secrets"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = "secretsmanager:GetSecretValue",
        Resource = [
          "arn:aws:secretsmanager:${var.aws_region}:${data.aws_caller_identity.current.account_id}:secret:cloudfront-private-key",
          "arn:aws:secretsmanager:${var.aws_region}:${data.aws_caller_identity.current.account_id}:secret:cloudfront-key-pair-id"
        ]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_secrets_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.secrets_manager_access.arn
}

#-------------------------Pre-Signed URL + SES APIGateway--------------------------------------------------#

resource "aws_api_gateway_resource" "send_cv_resource" {
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id
  parent_id   = aws_api_gateway_rest_api.viewer_count_api.root_resource_id
  path_part   = "send-cv"
}

resource "aws_api_gateway_method" "send_cv_method" {
  rest_api_id   = aws_api_gateway_rest_api.viewer_count_api.id
  resource_id   = aws_api_gateway_resource.send_cv_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "send_cv_integration" {
  rest_api_id             = aws_api_gateway_rest_api.viewer_count_api.id
  resource_id             = aws_api_gateway_resource.send_cv_resource.id
  http_method             = aws_api_gateway_method.send_cv_method.http_method
  integration_http_method = aws_api_gateway_method.send_cv_method.http_method
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.ses_lambda.invoke_arn
}

# In this project, the deployment ensures the /viewer-count resource, GET method, and Lambda integration are all part of the published API.
resource "aws_api_gateway_deployment" "send_cv_deployment" {
  depends_on = [aws_api_gateway_integration.send_cv_integration] # Ensures that the specified resource is fully created before the deployment is executed.
  # The API Gateway deployment depends on the Lambda integration. Without the integration, the deployment would fail because it wouldn’t know how to route requests to the backend.
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id # Ensures that this deployment applies to the API we’ve created for the viewer count.
}

resource "aws_lambda_permission" "api_gateway_send_cv_permission" {
  statement_id  = "AllowAPIGatewayInvokeSES"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.ses_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.viewer_count_api.execution_arn}/*/POST/send-cv"
}

resource "aws_api_gateway_method_response" "send_cv_response" {
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id
  resource_id = aws_api_gateway_resource.send_cv_resource.id
  http_method = "POST"
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.Access-Control-Allow-Headers" = true
  }
}

resource "aws_api_gateway_integration_response" "send_cv_integration_response" {
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id
  resource_id = aws_api_gateway_resource.send_cv_resource.id
  http_method = aws_api_gateway_method.send_cv_method.http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = "'*'"
    "method.response.header.Access-Control-Allow-Methods" = "'POST'"
    "method.response.header.Access-Control-Allow-Headers" = "'Content-Type'"
  }
  depends_on = [
    aws_api_gateway_method_response.send_cv_response
  ]
}

#-------------------------CloudFront--------------------------------------------------#

resource "aws_cloudfront_origin_access_control" "oac" {
  name                              = "cloud-resume-oac"
  description                       = "OAC for CloudFront to access S3 bucket securely"
  origin_access_control_origin_type = "s3"
  signing_behavior                  = "always"
  signing_protocol                  = "sigv4"
}

resource "aws_cloudfront_distribution" "cdn" {
  origin {
    domain_name              = aws_s3_bucket.website_bucket.bucket_regional_domain_name
    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id
    origin_id                = "S3-${aws_s3_bucket.website_bucket.id}"
  }

   origin {
    domain_name = aws_s3_bucket.cv_bucket.bucket_regional_domain_name
    origin_id   = "S3-CV-Bucket"
  }

  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"

  default_cache_behavior {
    allowed_methods  = ["GET", "HEAD"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "S3-${aws_s3_bucket.website_bucket.id}"

    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "redirect-to-https"
  }

  # Cache behavior for CV file
  ordered_cache_behavior {
    path_pattern         = "cv.pdf"
    allowed_methods      = ["GET", "HEAD"]
    cached_methods       = ["GET", "HEAD"]
    target_origin_id     = "S3-CV-Bucket"
    viewer_protocol_policy = "redirect-to-https"

    forwarded_values {
      query_string = true
      cookies {
        forward = "none"
      }
    }
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }

}

#-------------------------DynamoDB-Table--------------------------------------------------#


resource "aws_dynamodb_table" "viewer_count_table" {
  name         = "ViewerCountTable"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "counter_id"

  attribute {
    name = "counter_id"
    type = "S"
  }

  tags = {
    Name = "Viewer Count DynamoDB Table"
  }
}

#---------------------------LambdaViewerCount---------------------------------------------------------#


# IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "lambda_dynamodb_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Policy for DynamoDB Access
resource "aws_iam_policy" "lambda_policy" {
  name        = "lambda_dynamodb_policy"
  description = "Allows Lambda to read/write to DynamoDB"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem"
        ],
        Resource = aws_dynamodb_table.viewer_count_table.arn
      },
    ]
  })
}

# Attach Policy to Role
resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Lambda Function
resource "aws_lambda_function" "viewer_count_function" {
  filename      = "viewer_count.zip"
  function_name = "viewer_count"
  role          = aws_iam_role.lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.9"

  # Set environment variables
  environment {
    variables = {
      DYNAMODB_TABLE = aws_dynamodb_table.viewer_count_table.name
    }
  }

  depends_on = [aws_iam_role_policy_attachment.lambda_policy_attachment]
}

# IAM Permission 
# Without it, API Gateway won’t be able to call your Lambda function.
# This permission ensures secure integration between API Gateway and Lambda. 
resource "aws_lambda_permission" "lambda_permission" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.viewer_count_function.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_api_gateway_rest_api.viewer_count_api.execution_arn}/*/GET/viewer-count"

  depends_on = [
    aws_api_gateway_rest_api.viewer_count_api, # Ensure API Gateway is created first
    aws_lambda_function.viewer_count_function  # Ensure Lambda exists
  ]
}

#------------------------API-Gateway--------------------------------------------------------#

# Define the REST API
# Defines the top-level API Gateway container that holds all resources, methods, and stages.
# Serves as the entry point for HTTP requests to interact with the Lambda function.
# ViewerCountAPI clearly indicates that this API is for managing the viewer count in DynamoDB.
resource "aws_api_gateway_rest_api" "viewer_count_api" {
  name        = "ViewerCountAPI"
  description = "API Gateway for the Viewer Count Lambda function"
}

# Create a resource (path) that clients will access. under the REST API
# Creates a specific path (/viewer-count) within the API to structure the endpoint.
resource "aws_api_gateway_resource" "viewer_count_resource" {
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id               # Links this resource to the REST API created above and ensures this resource is part of the ViewerCountAPI.
  parent_id   = aws_api_gateway_rest_api.viewer_count_api.root_resource_id # Links this resource to the root path (/) of the API. 
  # Adds /viewer-count as a child of the root path, making the full path /prod/viewer-count.

  path_part = "viewer-count" # Path: /viewer-count (Specifies the path segment (viewer-count) that will appear in the URL.) Clearly represents the purpose of the resource in the API structure.
}

# Defines the HTTP method (GET) for the /viewer-count resource.
# Allows clients to send GET requests to retrieve and increment the viewer count.
resource "aws_api_gateway_method" "viewer_count_get" {
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id      # Links this method to the REST API.
  resource_id = aws_api_gateway_resource.viewer_count_resource.id # Links this method to the /viewer-count resource.
  http_method = "GET"                                             # The main purpose of the API is to retrieve and increment the viewer count. Idempotent (repeated calls do not produce different outcomes, apart from dynamic data like viewer counts).
  # The user doesn’t explicitly provide data to the API, which makes GET a natural choice.
  authorization = "NONE"
}

# Integrate the GET method with the Lambda function (Connects the /viewer-count resource and its GET method to the Lambda function.) 
# Enables Lambda Proxy integration, allowing the Lambda function to handle the request and response directly.
resource "aws_api_gateway_integration" "lambda_integration" {
  depends_on              = [aws_api_gateway_method.viewer_count_get]
  rest_api_id             = aws_api_gateway_rest_api.viewer_count_api.id         # Links the integration to the REST API.
  resource_id             = aws_api_gateway_resource.viewer_count_resource.id    # Links the integration to the /viewer-count resource. 
  http_method             = aws_api_gateway_method.viewer_count_get.http_method  # Links the integration to the GET method. 
  type                    = "AWS_PROXY"                                          # Lambda Proxy integration
  uri                     = aws_lambda_function.viewer_count_function.invoke_arn # Specifies the Lambda function’s invoke ARN. (The resource above)
  integration_http_method = "POST"                                               # Tells API Gateway which HTTP method to use when invoking the backend (in this case, the Lambda function) 
  # For Lambda integrations, this is usually set to POST because API Gateway invokes Lambda functions using HTTP POST requests. 
}

# Created a deployment of the API (Deploy API)
# A deployment is a snapshot of the API's current configuration (resources, methods, integrations, etc.) at a specific point in time. 
# It is required before we  can expose the API publicly through a stage (like /prod). 

# In this project, the deployment ensures the /viewer-count resource, GET method, and Lambda integration are all part of the published API.
resource "aws_api_gateway_deployment" "viewer_count_deployment" {
  depends_on = [aws_api_gateway_integration.lambda_integration] # Ensures that the specified resource is fully created before the deployment is executed.
  # The API Gateway deployment depends on the Lambda integration. Without the integration, the deployment would fail because it wouldn’t know how to route requests to the backend.
  rest_api_id = aws_api_gateway_rest_api.viewer_count_api.id # Ensures that this deployment applies to the API we’ve created for the viewer count.
}

# Define a Stage:
# A stage defines the environment (e.g., prod, dev, staging) and provides a publicly accessible URL endpoint.
# Uses the deployment to expose the API publicly at a specific URL.
# Exposes the API publicly so the frontend can fetch and increment the viewer count via HTTP requests.
resource "aws_api_gateway_stage" "viewer_count_stage" {
  deployment_id = aws_api_gateway_deployment.viewer_count_deployment.id # Links this stage to a specific deployment.
  rest_api_id   = aws_api_gateway_rest_api.viewer_count_api.id          # Links the stage to the REST API.
  stage_name    = "prod"                                                # Defines this as the production environment.
  }



